// source: message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.ExecutionCursor', null, global);
goog.exportSymbol('proto.StackFrame', null, global);
goog.exportSymbol('proto.TraceEvent', null, global);
goog.exportSymbol('proto.TraceSession', null, global);
goog.exportSymbol('proto.Variable', null, global);
goog.exportSymbol('proto.Variables', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TraceSession = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TraceSession.repeatedFields_, null);
};
goog.inherits(proto.TraceSession, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TraceSession.displayName = 'proto.TraceSession';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TraceEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TraceEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TraceEvent.displayName = 'proto.TraceEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Variables = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Variables.repeatedFields_, null);
};
goog.inherits(proto.Variables, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Variables.displayName = 'proto.Variables';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Variable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Variable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Variable.displayName = 'proto.Variable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ExecutionCursor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ExecutionCursor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ExecutionCursor.displayName = 'proto.ExecutionCursor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StackFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StackFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StackFrame.displayName = 'proto.StackFrame';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TraceSession.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.TraceSession.prototype.toObject = function(opt_includeInstance) {
    return proto.TraceSession.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.TraceSession} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.TraceSession.toObject = function(includeInstance, msg) {
    var f, obj = {
      eventsList: jspb.Message.toObjectList(msg.getEventsList(),
        proto.TraceEvent.toObject, includeInstance),
      stackFramesList: jspb.Message.toObjectList(msg.getStackFramesList(),
        proto.StackFrame.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TraceSession}
 */
proto.TraceSession.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TraceSession;
  return proto.TraceSession.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TraceSession} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TraceSession}
 */
proto.TraceSession.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.TraceEvent;
        reader.readMessage(value,proto.TraceEvent.deserializeBinaryFromReader);
        msg.addEvents(value);
        break;
      case 2:
        var value = new proto.StackFrame;
        reader.readMessage(value,proto.StackFrame.deserializeBinaryFromReader);
        msg.addStackFrames(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TraceSession.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TraceSession.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TraceSession} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TraceSession.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.TraceEvent.serializeBinaryToWriter
    );
  }
  f = message.getStackFramesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.StackFrame.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TraceEvent events = 1;
 * @return {!Array<!proto.TraceEvent>}
 */
proto.TraceSession.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.TraceEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TraceEvent, 1));
};


/**
 * @param {!Array<!proto.TraceEvent>} value
 * @return {!proto.TraceSession} returns this
 */
proto.TraceSession.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.TraceEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TraceEvent}
 */
proto.TraceSession.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TraceEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TraceSession} returns this
 */
proto.TraceSession.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};


/**
 * repeated StackFrame stack_frames = 2;
 * @return {!Array<!proto.StackFrame>}
 */
proto.TraceSession.prototype.getStackFramesList = function() {
  return /** @type{!Array<!proto.StackFrame>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.StackFrame, 2));
};


/**
 * @param {!Array<!proto.StackFrame>} value
 * @return {!proto.TraceSession} returns this
 */
proto.TraceSession.prototype.setStackFramesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.StackFrame=} opt_value
 * @param {number=} opt_index
 * @return {!proto.StackFrame}
 */
proto.TraceSession.prototype.addStackFrames = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.StackFrame, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TraceSession} returns this
 */
proto.TraceSession.prototype.clearStackFramesList = function() {
  return this.setStackFramesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.TraceEvent.prototype.toObject = function(opt_includeInstance) {
    return proto.TraceEvent.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.TraceEvent} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.TraceEvent.toObject = function(includeInstance, msg) {
    var f, obj = {
      eventName: jspb.Message.getFieldWithDefault(msg, 1, ""),
      cursor: (f = msg.getCursor()) && proto.ExecutionCursor.toObject(includeInstance, f),
      stackId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      inputVariables: (f = msg.getInputVariables()) && proto.Variables.toObject(includeInstance, f),
      locals: (f = msg.getLocals()) && proto.Variables.toObject(includeInstance, f),
      returnVariables: (f = msg.getReturnVariables()) && proto.Variables.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TraceEvent}
 */
proto.TraceEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TraceEvent;
  return proto.TraceEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TraceEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TraceEvent}
 */
proto.TraceEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setEventName(value);
        break;
      case 2:
        var value = new proto.ExecutionCursor;
        reader.readMessage(value,proto.ExecutionCursor.deserializeBinaryFromReader);
        msg.setCursor(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setStackId(value);
        break;
      case 4:
        var value = new proto.Variables;
        reader.readMessage(value,proto.Variables.deserializeBinaryFromReader);
        msg.setInputVariables(value);
        break;
      case 5:
        var value = new proto.Variables;
        reader.readMessage(value,proto.Variables.deserializeBinaryFromReader);
        msg.setLocals(value);
        break;
      case 6:
        var value = new proto.Variables;
        reader.readMessage(value,proto.Variables.deserializeBinaryFromReader);
        msg.setReturnVariables(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TraceEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TraceEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TraceEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TraceEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCursor();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ExecutionCursor.serializeBinaryToWriter
    );
  }
  f = message.getStackId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getInputVariables();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Variables.serializeBinaryToWriter
    );
  }
  f = message.getLocals();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Variables.serializeBinaryToWriter
    );
  }
  f = message.getReturnVariables();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Variables.serializeBinaryToWriter
    );
  }
};


/**
 * optional string event_name = 1;
 * @return {string}
 */
proto.TraceEvent.prototype.getEventName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TraceEvent} returns this
 */
proto.TraceEvent.prototype.setEventName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ExecutionCursor cursor = 2;
 * @return {?proto.ExecutionCursor}
 */
proto.TraceEvent.prototype.getCursor = function() {
  return /** @type{?proto.ExecutionCursor} */ (
    jspb.Message.getWrapperField(this, proto.ExecutionCursor, 2));
};


/**
 * @param {?proto.ExecutionCursor|undefined} value
 * @return {!proto.TraceEvent} returns this
 */
proto.TraceEvent.prototype.setCursor = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TraceEvent} returns this
 */
proto.TraceEvent.prototype.clearCursor = function() {
  return this.setCursor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TraceEvent.prototype.hasCursor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 stack_id = 3;
 * @return {number}
 */
proto.TraceEvent.prototype.getStackId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.TraceEvent} returns this
 */
proto.TraceEvent.prototype.setStackId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Variables input_variables = 4;
 * @return {?proto.Variables}
 */
proto.TraceEvent.prototype.getInputVariables = function() {
  return /** @type{?proto.Variables} */ (
    jspb.Message.getWrapperField(this, proto.Variables, 4));
};


/**
 * @param {?proto.Variables|undefined} value
 * @return {!proto.TraceEvent} returns this
 */
proto.TraceEvent.prototype.setInputVariables = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TraceEvent} returns this
 */
proto.TraceEvent.prototype.clearInputVariables = function() {
  return this.setInputVariables(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TraceEvent.prototype.hasInputVariables = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Variables locals = 5;
 * @return {?proto.Variables}
 */
proto.TraceEvent.prototype.getLocals = function() {
  return /** @type{?proto.Variables} */ (
    jspb.Message.getWrapperField(this, proto.Variables, 5));
};


/**
 * @param {?proto.Variables|undefined} value
 * @return {!proto.TraceEvent} returns this
 */
proto.TraceEvent.prototype.setLocals = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TraceEvent} returns this
 */
proto.TraceEvent.prototype.clearLocals = function() {
  return this.setLocals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TraceEvent.prototype.hasLocals = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Variables return_variables = 6;
 * @return {?proto.Variables}
 */
proto.TraceEvent.prototype.getReturnVariables = function() {
  return /** @type{?proto.Variables} */ (
    jspb.Message.getWrapperField(this, proto.Variables, 6));
};


/**
 * @param {?proto.Variables|undefined} value
 * @return {!proto.TraceEvent} returns this
 */
proto.TraceEvent.prototype.setReturnVariables = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TraceEvent} returns this
 */
proto.TraceEvent.prototype.clearReturnVariables = function() {
  return this.setReturnVariables(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TraceEvent.prototype.hasReturnVariables = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Variables.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Variables.prototype.toObject = function(opt_includeInstance) {
    return proto.Variables.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Variables} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Variables.toObject = function(includeInstance, msg) {
    var f, obj = {
      variablesList: jspb.Message.toObjectList(msg.getVariablesList(),
        proto.Variable.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Variables}
 */
proto.Variables.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Variables;
  return proto.Variables.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Variables} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Variables}
 */
proto.Variables.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.Variable;
        reader.readMessage(value,proto.Variable.deserializeBinaryFromReader);
        msg.addVariables(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Variables.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Variables.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Variables} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Variables.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Variable.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Variable variables = 1;
 * @return {!Array<!proto.Variable>}
 */
proto.Variables.prototype.getVariablesList = function() {
  return /** @type{!Array<!proto.Variable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Variable, 1));
};


/**
 * @param {!Array<!proto.Variable>} value
 * @return {!proto.Variables} returns this
 */
proto.Variables.prototype.setVariablesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Variable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Variable}
 */
proto.Variables.prototype.addVariables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Variable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Variables} returns this
 */
proto.Variables.prototype.clearVariablesList = function() {
  return this.setVariablesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Variable.prototype.toObject = function(opt_includeInstance) {
    return proto.Variable.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Variable} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Variable.toObject = function(includeInstance, msg) {
    var f, obj = {
      name: jspb.Message.getFieldWithDefault(msg, 1, ""),
      value: jspb.Message.getFieldWithDefault(msg, 2, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Variable}
 */
proto.Variable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Variable;
  return proto.Variable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Variable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Variable}
 */
proto.Variable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setValue(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Variable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Variable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Variable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Variable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Variable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Variable} returns this
 */
proto.Variable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.Variable.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Variable} returns this
 */
proto.Variable.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ExecutionCursor.prototype.toObject = function(opt_includeInstance) {
    return proto.ExecutionCursor.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ExecutionCursor} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ExecutionCursor.toObject = function(includeInstance, msg) {
    var f, obj = {
      file: jspb.Message.getFieldWithDefault(msg, 1, ""),
      line: jspb.Message.getFieldWithDefault(msg, 2, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ExecutionCursor}
 */
proto.ExecutionCursor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ExecutionCursor;
  return proto.ExecutionCursor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ExecutionCursor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ExecutionCursor}
 */
proto.ExecutionCursor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setFile(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setLine(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ExecutionCursor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ExecutionCursor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ExecutionCursor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExecutionCursor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFile();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLine();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string file = 1;
 * @return {string}
 */
proto.ExecutionCursor.prototype.getFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ExecutionCursor} returns this
 */
proto.ExecutionCursor.prototype.setFile = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 line = 2;
 * @return {number}
 */
proto.ExecutionCursor.prototype.getLine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ExecutionCursor} returns this
 */
proto.ExecutionCursor.prototype.setLine = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.StackFrame.prototype.toObject = function(opt_includeInstance) {
    return proto.StackFrame.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.StackFrame} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.StackFrame.toObject = function(includeInstance, msg) {
    var f, obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      file: jspb.Message.getFieldWithDefault(msg, 2, ""),
      line: jspb.Message.getFieldWithDefault(msg, 3, 0),
      parentId: jspb.Message.getFieldWithDefault(msg, 4, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StackFrame}
 */
proto.StackFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StackFrame;
  return proto.StackFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StackFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StackFrame}
 */
proto.StackFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setFile(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setLine(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setParentId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StackFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StackFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StackFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StackFrame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFile();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLine();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getParentId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.StackFrame.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.StackFrame} returns this
 */
proto.StackFrame.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string file = 2;
 * @return {string}
 */
proto.StackFrame.prototype.getFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.StackFrame} returns this
 */
proto.StackFrame.prototype.setFile = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 line = 3;
 * @return {number}
 */
proto.StackFrame.prototype.getLine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.StackFrame} returns this
 */
proto.StackFrame.prototype.setLine = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 parent_id = 4;
 * @return {number}
 */
proto.StackFrame.prototype.getParentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.StackFrame} returns this
 */
proto.StackFrame.prototype.setParentId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


goog.object.extend(exports, proto);
